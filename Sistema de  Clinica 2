{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlexandreStackholders/AnhangueraADS/blob/main/Sistema%20de%20%20Clinica%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pacientes = []\n",
        "\n",
        "def cadastrar_paciente():\n",
        "    \"\"\"Função para cadastrar um novo paciente.\"\"\"\n",
        "    print(\"\\n--- CADASTRAR PACIENTE ---\")\n",
        "    nome = input(\"Nome do paciente: \")\n",
        "    cpf = int(input(\"Cpf: \"))\n",
        "    idade = int(input(\"Idade: \"))\n",
        "    telefone = input(\"Telefone (DD) NNNNN-NNNN: \")\n",
        "\n",
        "    paciente = {\n",
        "        \"nome\": nome,\n",
        "        \"cpf\": cpf,\n",
        "        \"idade\": idade,\n",
        "        \"telefone\": telefone\n",
        "    }\n",
        "    pacientes.append(paciente)\n",
        "    print(\"Paciente cadastrado com sucesso!\")\n",
        "\n",
        "    # Ilustração visual do paciente sendo cadastrado.\n",
        "    # Imagine uma ficha de paciente sendo preenchida.\n",
        "\n",
        "def ver_estatisticas():\n",
        "    \"\"\"Função para exibir estatísticas da clínica.\"\"\"\n",
        "    print(\"\\n--- ESTATÍSTICAS ---\")\n",
        "    total_pacientes = len(pacientes)\n",
        "    print(f\"Total de pacientes cadastrados: {total_pacientes}\")\n",
        "\n",
        "    if total_pacientes > 0:\n",
        "        idades = [p['idade'] for p in pacientes]\n",
        "        idade_media = sum(idades) / total_pacientes\n",
        "        print(f\"Idade média dos pacientes: {idade_media:.2f} anos\")\n",
        "    else:\n",
        "        print(\"Nenhum paciente cadastrado para calcular estatísticas.\")\n",
        "\n",
        "    # Ilustração de um gráfico de pizza simples mostrando a distribuição de pacientes, talvez por idade.\n",
        "\n",
        "def buscar_paciente():\n",
        "    \"\"\"Função para buscar um paciente pelo nome.\"\"\"\n",
        "    print(\"\\n--- BUSCAR PACIENTE ---\")\n",
        "    termo_busca = input(\"Digite o nome do paciente para buscar: \").lower()\n",
        "\n",
        "    encontrados = [p for p in pacientes if termo_busca in p['nome'].lower()]\n",
        "\n",
        "    if encontrados:\n",
        "        print(\"\\nPacientes encontrados:\")\n",
        "        for paciente in encontrados:\n",
        "            print(f\"Nome: {paciente['nome']}, Cpf: {paciente['cpf']} , Idade: {paciente['idade']}, Telefone: {paciente['telefone']}\")\n",
        "    else:\n",
        "        print(\"Nenhum paciente encontrado com esse nome.\")\n",
        "\n",
        "    # Ilustração de uma lupa procurando por nomes em uma lista.\n",
        "\n",
        "def listar_todos_pacientes():\n",
        "    \"\"\"Função para listar todos os pacientes cadastrados.\"\"\"\n",
        "    print(\"\\n--- LISTA DE TODOS OS PACIENTES ---\")\n",
        "    if not pacientes:\n",
        "        print(\"Nenhum paciente cadastrado.\")\n",
        "    else:\n",
        "        for i, paciente in enumerate(pacientes):\n",
        "            print(f\"[{i+1}] Nome: {paciente['nome']}, Cpf: {paciente['cpf']} , Idade: {paciente['idade']}, Telefone: {paciente['telefone']}\")\n",
        "\n",
        "    # Ilustração de uma lista de nomes em um caderno ou tela.\n",
        "\n",
        "def menu_principal():\n",
        "    \"\"\"Função principal que exibe o menu e gerencia as opções.\"\"\"\n",
        "    while True:\n",
        "        print(\"\\n=== SISTEMA CLÍNICA VIDA+ ===\")\n",
        "        print(\"1. Cadastrar paciente\")\n",
        "        print(\"2. Ver estatísticas\")\n",
        "        print(\"3. Buscar paciente\")\n",
        "        print(\"4. Listar todos os pacientes\")\n",
        "        print(\"5. Sair\")\n",
        "\n",
        "        escolha = input(\"Escolha uma opção: \")\n",
        "\n",
        "        if escolha == '1':\n",
        "            cadastrar_paciente()\n",
        "        elif escolha == '2':\n",
        "            ver_estatisticas()\n",
        "        elif escolha == '3':\n",
        "            buscar_paciente()\n",
        "        elif escolha == '4':\n",
        "            listar_todos_pacientes()\n",
        "        elif escolha == '5':\n",
        "            print(\"Saindo do sistema. Até mais!\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opção inválida. Por favor, escolha um número de 1 a 5.\")\n",
        "\n",
        "# Iniciar o aplicativo\n",
        "if __name__ == \"__main__\":\n",
        "    menu_principal()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "srczqrGGgeRk",
        "outputId": "af1f4006-6cd6-4ca5-9b27-df6ac4b855e0"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== SISTEMA CLÍNICA VIDA+ ===\n",
            "1. Cadastrar paciente\n",
            "2. Ver estatísticas\n",
            "3. Buscar paciente\n",
            "4. Listar todos os pacientes\n",
            "5. Sair\n",
            "Escolha uma opção: 5\n",
            "Saindo do sistema. Até mais!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " pacientes = []\n",
        "\n",
        "def cadastrar_paciente():\n",
        "    \"\"\"Função para cadastrar um novo paciente.\"\"\"\n",
        "    print(\"\\n--- CADASTRAR PACIENTE ---\")\n",
        "    try:\n",
        "        nome = input(\"Nome do paciente: \")\n",
        "        cpf = int(input(\"Cpf (somente números): \"))\n",
        "        idade = int(input(\"Idade: \"))\n",
        "        telefone = input(\"Telefone (DD) NNNNN-NNNN: \")\n",
        "\n",
        "        paciente = {\n",
        "            \"nome\": nome,\n",
        "            \"cpf\": cpf,\n",
        "            \"idade\": idade,\n",
        "            \"telefone\": telefone\n",
        "        }\n",
        "        pacientes.append(paciente)\n",
        "        print(\"Paciente cadastrado com sucesso!\")\n",
        "    except ValueError:\n",
        "        print(\"ERRO: CPF e Idade devem ser números inteiros. Cadastro cancelado.\")\n",
        "\n",
        "def ver_estatisticas():\n",
        "    \"\"\"Função para exibir estatísticas da clínica.\"\"\"\n",
        "    print(\"\\n--- ESTATÍSTICAS ---\")\n",
        "    total_pacientes = len(pacientes)\n",
        "    print(f\"Total de pacientes cadastrados: {total_pacientes}\")\n",
        "\n",
        "    if total_pacientes > 0:\n",
        "        idades = [p['idade'] for p in pacientes]\n",
        "        idade_media = sum(idades) / total_pacientes\n",
        "        print(f\"Idade média dos pacientes: {idade_media:.2f} anos\")\n",
        "    else:\n",
        "        print(\"Nenhum paciente cadastrado para calcular estatísticas.\")\n",
        "\n",
        "def buscar_paciente():\n",
        "    \"\"\"Função para buscar um paciente pelo nome.\"\"\"\n",
        "    print(\"\\n--- BUSCAR PACIENTE ---\")\n",
        "    termo_busca = input(\"Digite o nome do paciente para buscar: \").lower()\n",
        "\n",
        "    encontrados = [p for p in pacientes if termo_busca in p['nome'].lower()]\n",
        "\n",
        "    if encontrados:\n",
        "        print(\"\\nPacientes encontrados:\")\n",
        "        for paciente in encontrados:\n",
        "            print(f\"Nome: {paciente['nome']}, Cpf: {paciente['cpf']} , Idade: {paciente['idade']}, Telefone: {paciente['telefone']}\")\n",
        "    else:\n",
        "        print(\"Nenhum paciente encontrado com esse nome.\")\n",
        "\n",
        "def listar_todos_pacientes():\n",
        "    \"\"\"Função para listar todos os pacientes cadastrados.\"\"\"\n",
        "    print(\"\\n--- LISTA DE TODOS OS PACIENTES ---\")\n",
        "    if not pacientes:\n",
        "        print(\"Nenhum paciente cadastrado.\")\n",
        "        return\n",
        "    else:\n",
        "        for i, paciente in enumerate(pacientes):\n",
        "            print(f\"[{i+1}] Nome: {paciente['nome']}, Cpf: {paciente['cpf']} , Idade: {paciente['idade']}, Telefone: {paciente['telefone']}\")\n",
        "\n",
        "def imprimir_cadastro():\n",
        "    \"\"\"Função para selecionar um paciente e 'imprimir' (salvar em arquivo TXT).\"\"\"\n",
        "    if not pacientes:\n",
        "        print(\"\\nNenhum paciente cadastrado para imprimir.\")\n",
        "        return\n",
        "\n",
        "    listar_todos_pacientes()\n",
        "\n",
        "    try:\n",
        "        escolha_indice = int(input(\"\\nDigite o número do paciente que deseja imprimir: \")) - 1\n",
        "    except ValueError:\n",
        "        print(\"Entrada inválida. Por favor, digite um número.\")\n",
        "        return\n",
        "\n",
        "    if 0 <= escolha_indice < len(pacientes):\n",
        "        paciente = pacientes[escolha_indice]\n",
        "\n",
        "        # Cria o conteúdo da ficha\n",
        "        conteudo_ficha = f\"\"\"\n",
        "======================================\n",
        "FICHA DE CADASTRO DO PACIENTE\n",
        "======================================\n",
        "Nome: {paciente['nome']}\n",
        "CPF: {paciente['cpf']}\n",
        "Idade: {paciente['idade']} anos\n",
        "Telefone: {paciente['telefone']}\n",
        "======================================\n",
        "Gerado em: (Data/Hora Atual)\n",
        "\"\"\"\n",
        "        # Define o nome do arquivo\n",
        "        nome_arquivo = f\"cadastro_{paciente['cpf']}.txt\"\n",
        "\n",
        "        # Salva o conteúdo no arquivo TXT\n",
        "        try:\n",
        "            with open(nome_arquivo, 'w', encoding='utf-8') as arquivo:\n",
        "                arquivo.write(conteudo_ficha)\n",
        "\n",
        "            print(f\"\\n--- IMPRESSÃO CONCLUÍDA ---\")\n",
        "            print(f\"O cadastro de {paciente['nome']} foi salvo no arquivo: {nome_arquivo}\")\n",
        "            print(\"Você pode imprimir este arquivo manualmente.\")\n",
        "\n",
        "        except Exception as e:\n",
        "            print(f\"ERRO ao salvar o arquivo: {e}\")\n",
        "\n",
        "    else:\n",
        "        print(\"Número de paciente inválido.\")\n",
        "\n",
        "def menu_principal():\n",
        "    \"\"\"Função principal que exibe o menu e gerencia as opções.\"\"\"\n",
        "    while True:\n",
        "        print(\"\\n=== SISTEMA CLÍNICA VIDA+ ===\")\n",
        "        print(\"1. Cadastrar paciente\")\n",
        "        print(\"2. Ver estatísticas\")\n",
        "        print(\"3. Buscar paciente\")\n",
        "        print(\"4. Listar todos os pacientes\")\n",
        "        print(\"5. Imprimir/Salvar Cadastro (TXT)\") # Nova opção\n",
        "        print(\"6. Sair\")                          # Opção de sair atualizada\n",
        "\n",
        "        escolha = input(\"Escolha uma opção: \")\n",
        "\n",
        "        if escolha == '1':\n",
        "            cadastrar_paciente()\n",
        "        elif escolha == '2':\n",
        "            ver_estatisticas()\n",
        "        elif escolha == '3':\n",
        "            buscar_paciente()\n",
        "        elif escolha == '4':\n",
        "            listar_todos_pacientes()\n",
        "        elif escolha == '5':\n",
        "            imprimir_cadastro() # Nova chamada de função\n",
        "        elif escolha == '6':\n",
        "            print(\"Saindo do sistema. Até mais!\")\n",
        "            break\n",
        "        else:\n",
        "            print(\"Opção inválida. Por favor, escolha um número de 1 a 6.\")\n",
        "\n",
        "# Iniciar o aplicativo\n",
        "if __name__ == \"__main__\":\n",
        "    menu_principal()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "52IP2jHpqmGv",
        "outputId": "2be368e9-7ace-4323-d5db-7a5f3dde1579"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== SISTEMA CLÍNICA VIDA+ ===\n",
            "1. Cadastrar paciente\n",
            "2. Ver estatísticas\n",
            "3. Buscar paciente\n",
            "4. Listar todos os pacientes\n",
            "5. Imprimir/Salvar Cadastro (TXT)\n",
            "6. Sair\n",
            "Escolha uma opção: 4\n",
            "\n",
            "--- LISTA DE TODOS OS PACIENTES ---\n",
            "Nenhum paciente cadastrado.\n",
            "\n",
            "=== SISTEMA CLÍNICA VIDA+ ===\n",
            "1. Cadastrar paciente\n",
            "2. Ver estatísticas\n",
            "3. Buscar paciente\n",
            "4. Listar todos os pacientes\n",
            "5. Imprimir/Salvar Cadastro (TXT)\n",
            "6. Sair\n",
            "Escolha uma opção: 4\n",
            "\n",
            "--- LISTA DE TODOS OS PACIENTES ---\n",
            "Nenhum paciente cadastrado.\n",
            "\n",
            "=== SISTEMA CLÍNICA VIDA+ ===\n",
            "1. Cadastrar paciente\n",
            "2. Ver estatísticas\n",
            "3. Buscar paciente\n",
            "4. Listar todos os pacientes\n",
            "5. Imprimir/Salvar Cadastro (TXT)\n",
            "6. Sair\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPfHPTOlE3MaJtO+IKuNuh4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}